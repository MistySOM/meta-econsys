!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADD_CUSTOM_CTRL	common.h	443;"	d
BLOCK_ERASE_INPROGRESS	common.h	44;"	d
BLOCK_START_ADDR	common.h	37;"	d
CALC_COMPLETED	common.h	46;"	d
CALC_INPROGRESS	common.h	47;"	d
DATA_SIZE	common.h	49;"	d
DEBUG	ecam-imx462.c	8;"	d	file:
DEBUG_PRINTKx	ecam-imx462.c	10;"	d	file:
DEFAULT_FPS	common.h	26;"	d
ERASE_COMPLETED	common.h	43;"	d
FIRST_BLOCK	common.h	35;"	d
FIRST_SECTOR	common.h	32;"	d
FLASH_COMPLETED	common.h	41;"	d
FLASH_INPROGRESS	common.h	42;"	d
FREE_SAFE	common.h	236;"	d
IMX462_30_FPS	common.h	/^	IMX462_30_FPS,$/;"	e	enum:imx462_frame_rate
IMX462_60_FPS	common.h	/^	IMX462_60_FPS,$/;"	e	enum:imx462_frame_rate
IMX462_DEFAULT_DATAFMT	common.h	20;"	d
IMX462_DEFAULT_GAIN	common.h	53;"	d
IMX462_DEFAULT_HEIGHT	common.h	23;"	d
IMX462_DEFAULT_MODE	common.h	21;"	d
IMX462_DEFAULT_WIDTH	common.h	22;"	d
IMX462_MAX_GAIN	common.h	52;"	d
IMX462_MIN_GAIN	common.h	51;"	d
IMX462_MODE_FHD	common.h	/^	IMX462_MODE_FHD = 2,$/;"	e	enum:__anon7
IMX462_MODE_HD	common.h	/^	IMX462_MODE_HD = 1,$/;"	e	enum:__anon7
IMX462_MODE_MAX	common.h	/^	IMX462_MODE_MAX = 2,$/;"	e	enum:__anon7
IMX462_MODE_MIN	common.h	/^	IMX462_MODE_MIN = 0,$/;"	e	enum:__anon7
IMX462_MODE_VGA	common.h	/^	IMX462_MODE_VGA = 0,$/;"	e	enum:__anon7
IMX462_NUM_CONTROLS	common.h	/^	IMX462_NUM_CONTROLS$/;"	e	enum:__anon6
IMX462_NUM_FRAMERATES	common.h	/^	IMX462_NUM_FRAMERATES,$/;"	e	enum:imx462_frame_rate
IMX462_NUM_SUPPLIES	common.h	100;"	d
IMX462_VERSION	common.h	19;"	d
ISP_CTRL_INFO	common.h	/^} ISP_CTRL_INFO;$/;"	t	typeref:struct:_isp_ctrl_info_std
ISP_CTRL_UI_INFO	common.h	/^} ISP_CTRL_UI_INFO;$/;"	t	typeref:struct:_isp_ctrl_ui_info
ISP_STREAM_INFO	common.h	/^} ISP_STREAM_INFO;$/;"	t	typeref:struct:_isp_stream_info
LAST_SECTOR	common.h	33;"	d
MAX_CTRL_DATA_LEN	common.h	56;"	d
MAX_CTRL_INFO	common.h	55;"	d
MAX_CTRL_MENU_ELEM	common.h	58;"	d
MAX_CTRL_UI_STRING_LEN	common.h	57;"	d
MAX_FPS	common.h	25;"	d
MIN_FPS	common.h	24;"	d
NEXT_SECTOR	common.h	38;"	d
NO_UPDATE	common.h	29;"	d
NUM_MENU_ELEM_AF	common.h	/^	NUM_MENU_ELEM_AF,$/;"	e	enum:__anon12
NUM_MENU_ELEM_CAF	common.h	/^	NUM_MENU_ELEM_CAF,$/;"	e	enum:__anon13
NUM_MENU_ELEM_DENOISE	common.h	/^	NUM_MENU_ELEM_DENOISE,$/;"	e	enum:__anon9
NUM_MENU_ELEM_EXPOSURE	common.h	/^	NUM_MENU_ELEM_EXPOSURE,$/;"	e	enum:__anon8
NUM_MENU_ELEM_POWER_LINE_FREQUENCY	common.h	/^	NUM_MENU_ELEM_POWER_LINE_FREQUENCY,$/;"	e	enum:__anon10
NUM_MENU_ELEM_TEST_PATTERN	common.h	/^	NUM_MENU_ELEM_TEST_PATTERN,$/;"	e	enum:__anon15
NUM_MENU_ELEM_WB	common.h	/^	NUM_MENU_ELEM_WB,$/;"	e	enum:__anon11
NUM_MENU_ELEM_WDR	common.h	/^	NUM_MENU_ELEM_WDR,$/;"	e	enum:__anon14
PREVIOUS_SECTOR	common.h	39;"	d
RETRY_COUNT	common.h	50;"	d
SECTOR_END_ADDR	common.h	31;"	d
SECTOR_ERASE_INPROGRESS	common.h	45;"	d
SECTOR_START_ADDR	common.h	30;"	d
SRC	Makefile	/^SRC := $(shell pwd)$/;"	m
TOTAL_BLOCKS	common.h	36;"	d
TOTAL_SECTORS	common.h	34;"	d
UPDATE_NEEDED	common.h	28;"	d
V4L2_AF_CONTINUOUS	common.h	/^	V4L2_AF_CONTINUOUS = 0,$/;"	e	enum:__anon12
V4L2_AF_ONE_SHOT	common.h	/^	V4L2_AF_ONE_SHOT,$/;"	e	enum:__anon12
V4L2_CAF_FULL_RANGE	common.h	/^	V4L2_CAF_FULL_RANGE,$/;"	e	enum:__anon13
V4L2_CAF_HYPERFOCAL_RANGE	common.h	/^	V4L2_CAF_HYPERFOCAL_RANGE,$/;"	e	enum:__anon13
V4L2_CAF_INFINITY_RANGE	common.h	/^	V4L2_CAF_INFINITY_RANGE,$/;"	e	enum:__anon13
V4L2_CAF_MACRO_RANGE	common.h	/^	V4L2_CAF_MACRO_RANGE = 0,$/;"	e	enum:__anon13
V4L2_CAF_NORMAL_RANGE	common.h	/^	V4L2_CAF_NORMAL_RANGE,$/;"	e	enum:__anon13
V4L2_CID_DENOISE	common.h	60;"	d
V4L2_CID_FRAMERATE	common.h	61;"	d
V4L2_CTRL_AUTO_FOCUS_RANGE	common.h	/^	V4L2_CTRL_AUTO_FOCUS_RANGE,$/;"	e	enum:__anon6
V4L2_CTRL_AUTO_N_PRESET_WHITE_BALANCE	common.h	/^	V4L2_CTRL_AUTO_N_PRESET_WHITE_BALANCE,$/;"	e	enum:__anon6
V4L2_CTRL_BRIGHTNESS	common.h	/^	V4L2_CTRL_BRIGHTNESS,$/;"	e	enum:__anon6
V4L2_CTRL_CONTRAST	common.h	/^	V4L2_CTRL_CONTRAST,$/;"	e	enum:__anon6
V4L2_CTRL_DENOISE	common.h	/^	V4L2_CTRL_DENOISE,$/;"	e	enum:__anon6
V4L2_CTRL_EXPOSURE_ABSOLUTE	common.h	/^	V4L2_CTRL_EXPOSURE_ABSOLUTE,$/;"	e	enum:__anon6
V4L2_CTRL_EXPOSURE_AUTO	common.h	/^	V4L2_CTRL_EXPOSURE_AUTO,$/;"	e	enum:__anon6
V4L2_CTRL_FOCUS_ABSOLUTE	common.h	/^	V4L2_CTRL_FOCUS_ABSOLUTE,$/;"	e	enum:__anon6
V4L2_CTRL_FOCUS_AUTO	common.h	/^	V4L2_CTRL_FOCUS_AUTO,$/;"	e	enum:__anon6
V4L2_CTRL_FRAMERATE	common.h	/^	V4L2_CTRL_FRAMERATE,$/;"	e	enum:__anon6
V4L2_CTRL_GAIN	common.h	/^	V4L2_CTRL_GAIN,$/;"	e	enum:__anon6
V4L2_CTRL_POWER_LINE_FREQUENCY	common.h	/^	V4L2_CTRL_POWER_LINE_FREQUENCY,$/;"	e	enum:__anon6
V4L2_CTRL_SATURATION	common.h	/^	V4L2_CTRL_SATURATION,$/;"	e	enum:__anon6
V4L2_CTRL_SHARPNESS	common.h	/^	V4L2_CTRL_SHARPNESS,$/;"	e	enum:__anon6
V4L2_CTRL_ZOOM_ABSOLUTE	common.h	/^	V4L2_CTRL_ZOOM_ABSOLUTE,$/;"	e	enum:__anon6
V4L2_DENOISE_MENU_OFF	common.h	/^	V4L2_DENOISE_MENU_OFF,$/;"	e	enum:__anon9
V4L2_DENOISE_MENU_ON	common.h	/^	V4L2_DENOISE_MENU_ON = 0,$/;"	e	enum:__anon9
V4L2_EXPOSURE_MENU_AUTO	common.h	/^	V4L2_EXPOSURE_MENU_AUTO = 0,$/;"	e	enum:__anon8
V4L2_EXPOSURE_MENU_MANUAL	common.h	/^	V4L2_EXPOSURE_MENU_MANUAL,$/;"	e	enum:__anon8
V4L2_MANUAL_FOCUS	common.h	/^	V4L2_MANUAL_FOCUS,$/;"	e	enum:__anon12
V4L2_POWER_LINE_FREQUENCY_MENU_50HZ	common.h	/^	V4L2_POWER_LINE_FREQUENCY_MENU_50HZ,$/;"	e	enum:__anon10
V4L2_POWER_LINE_FREQUENCY_MENU_60HZ	common.h	/^	V4L2_POWER_LINE_FREQUENCY_MENU_60HZ,$/;"	e	enum:__anon10
V4L2_POWER_LINE_FREQUENCY_MENU_AUTO	common.h	/^	V4L2_POWER_LINE_FREQUENCY_MENU_AUTO = 0,$/;"	e	enum:__anon10
V4L2_POWER_LINE_FREQUENCY_MENU_OFF	common.h	/^	V4L2_POWER_LINE_FREQUENCY_MENU_OFF,$/;"	e	enum:__anon10
V4L2_TEST_PATTERN_OFF	common.h	/^	V4L2_TEST_PATTERN_OFF = 0,$/;"	e	enum:__anon15
V4L2_TEST_PATTERN_ON	common.h	/^	V4L2_TEST_PATTERN_ON,$/;"	e	enum:__anon15
V4L2_WB_AUTO	common.h	/^	V4L2_WB_AUTO = 0,$/;"	e	enum:__anon11
V4L2_WB_CANDLELIGHT	common.h	/^	V4L2_WB_CANDLELIGHT,$/;"	e	enum:__anon11
V4L2_WB_CLOUDY	common.h	/^	V4L2_WB_CLOUDY,$/;"	e	enum:__anon11
V4L2_WB_DAYLIGHT	common.h	/^	V4L2_WB_DAYLIGHT,$/;"	e	enum:__anon11
V4L2_WB_FLASH	common.h	/^	V4L2_WB_FLASH,$/;"	e	enum:__anon11
V4L2_WB_FLUORESCENCT	common.h	/^	V4L2_WB_FLUORESCENCT,$/;"	e	enum:__anon11
V4L2_WB_HORIZON	common.h	/^	V4L2_WB_HORIZON,$/;"	e	enum:__anon11
V4L2_WB_TUNGSTEN	common.h	/^	V4L2_WB_TUNGSTEN,$/;"	e	enum:__anon11
V4L2_WDR_HIGH	common.h	/^	V4L2_WDR_HIGH,$/;"	e	enum:__anon14
V4L2_WDR_LOW	common.h	/^	V4L2_WDR_LOW,$/;"	e	enum:__anon14
V4L2_WDR_MIDDLE	common.h	/^	V4L2_WDR_MIDDLE,$/;"	e	enum:__anon14
V4L2_WDR_OFF	common.h	/^	V4L2_WDR_OFF = 0,$/;"	e	enum:__anon14
VERSION_SIZE	common.h	27;"	d
__imx462_get_pad_crop	ecam-imx462.c	/^__imx462_get_pad_crop(struct imx462 *imx462, struct v4l2_subdev_pad_config *cfg,$/;"	f	file:
__imx462_get_pad_format	ecam-imx462.c	/^__imx462_get_pad_format(struct imx462 *imx462,$/;"	f	file:
_isp_ctrl_info_std	common.h	/^typedef struct _isp_ctrl_info_std {$/;"	s
_isp_ctrl_ui_info	common.h	/^typedef struct _isp_ctrl_ui_info {$/;"	s
_isp_stream_info	common.h	/^typedef struct _isp_stream_info {$/;"	s
af_range	common.h	/^	u8 af_range;$/;"	m	struct:imx462
antiBanding_mode	common.h	/^	s16 antiBanding_mode;$/;"	m	struct:imx462
antibanding_mode	common.h	/^static const char * const antibanding_mode[]={$/;"	v
auto_focus	common.h	/^	u8 auto_focus;$/;"	m	struct:imx462
bootData	common.h	/^static const u8 bootData[] = {$/;"	v
brightness	common.h	/^	u8 brightness;$/;"	m	struct:imx462
calcChecksum	ecam-imx462.c	/^static int calcChecksum(struct i2c_client *client)$/;"	f	file:
calcChkSum	common.h	/^static u8 calcChkSum[5]		= {0x05, 0x02, 0x0F, 0x09, 0x04};$/;"	v
calcStatus	common.h	/^static u8 calcStatus[5] 	= {0x05, 0x01, 0x0F, 0x09, 0x01};$/;"	v
camera_common_frmfmt	common.h	/^struct camera_common_frmfmt {$/;"	s
camera_initialization	ecam-imx462.c	/^int camera_initialization(struct imx462 *imx462)$/;"	f
code	common.h	/^	u32 code;$/;"	m	struct:imx462_datafmt
code	common.h	/^	u32 code;$/;"	m	struct:imx462_pixfmt
colorspace	common.h	/^	enum v4l2_colorspace colorspace;$/;"	m	struct:imx462_datafmt	typeref:enum:imx462_datafmt::v4l2_colorspace
colorspace	common.h	/^	u32 colorspace;$/;"	m	struct:imx462_pixfmt
cont	common.h	/^		} cont;$/;"	m	union:_isp_stream_info::__anon3	typeref:struct:_isp_stream_info::__anon3::__anon5
contrast	common.h	/^	s8 contrast;$/;"	m	struct:imx462
crop	common.h	/^	struct v4l2_rect crop;$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_rect
ctrl	common.h	/^	struct v4l2_ctrl *ctrl[];$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_ctrl
ctrl	common.h	441;"	d
ctrl_data	common.h	/^	}ctrl_data;$/;"	m	struct:_isp_ctrl_info_std	typeref:union:_isp_ctrl_info_std::__anon16
ctrl_def	common.h	/^			int32_t ctrl_def;$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon17
ctrl_def	common.h	/^			uint64_t ctrl_def;$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon18
ctrl_def	common.h	/^	s32 ctrl_def;$/;"	m	struct:__anon21
ctrl_id	common.h	/^	uint32_t ctrl_id;$/;"	m	struct:_isp_ctrl_info_std
ctrl_info	common.h	/^static ISP_CTRL_INFO *ctrl_info = NULL;$/;"	v
ctrl_max	common.h	/^			int32_t ctrl_max;$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon17
ctrl_max	common.h	/^			uint64_t ctrl_max;$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon18
ctrl_max	common.h	/^	s32 ctrl_max;$/;"	m	struct:__anon21
ctrl_menu_info	common.h	/^	} ctrl_menu_info;$/;"	m	struct:_isp_ctrl_ui_info	typeref:struct:_isp_ctrl_ui_info::__anon2
ctrl_menu_info	common.h	/^	}ctrl_menu_info;$/;"	m	struct:_isp_ctrl_info_std	typeref:struct:_isp_ctrl_info_std::__anon20
ctrl_min	common.h	/^			int32_t ctrl_min;$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon17
ctrl_min	common.h	/^			uint64_t ctrl_min;$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon18
ctrl_min	common.h	/^	s32 ctrl_min;$/;"	m	struct:__anon21
ctrl_name	common.h	/^		char ctrl_name[MAX_CTRL_UI_STRING_LEN];$/;"	m	struct:_isp_ctrl_info_std::__anon19
ctrl_name	common.h	/^		char ctrl_name[MAX_CTRL_UI_STRING_LEN];$/;"	m	struct:_isp_ctrl_ui_info::__anon1
ctrl_step	common.h	/^			int32_t ctrl_step;$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon17
ctrl_step	common.h	/^			uint64_t ctrl_step;$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon18
ctrl_step	common.h	/^	u32 ctrl_step;$/;"	m	struct:__anon21
ctrl_type	common.h	/^	uint8_t ctrl_type;$/;"	m	struct:_isp_ctrl_info_std
ctrl_ui_flags	common.h	/^		uint8_t ctrl_ui_flags;		$/;"	m	struct:_isp_ctrl_info_std::__anon19
ctrl_ui_flags	common.h	/^		uint8_t ctrl_ui_flags;$/;"	m	struct:_isp_ctrl_ui_info::__anon1
ctrl_ui_info	common.h	/^	} ctrl_ui_info;$/;"	m	struct:_isp_ctrl_ui_info	typeref:struct:_isp_ctrl_ui_info::__anon1
ctrl_ui_info	common.h	/^	}ctrl_ui_info;$/;"	m	struct:_isp_ctrl_info_std	typeref:struct:_isp_ctrl_info_std::__anon19
ctrl_ui_type	common.h	/^		uint8_t ctrl_ui_type;$/;"	m	struct:_isp_ctrl_info_std::__anon19
ctrl_ui_type	common.h	/^		uint8_t ctrl_ui_type;$/;"	m	struct:_isp_ctrl_ui_info::__anon1
ctrlcmd	common.h	/^static u8 ctrlcmd[5]		= {0x05, 0x02};$/;"	v
ctrls	common.h	/^	struct v4l2_ctrl_handler ctrls;$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_ctrl_handler
current_mode	common.h	/^	const struct imx462_mode_info	*current_mode;$/;"	m	struct:imx462	typeref:struct:imx462::imx462_mode_info
debug_printk	ecam-imx462.c	12;"	d	file:
debug_printk	ecam-imx462.c	14;"	d	file:
denoise	common.h	/^	u8 denoise;$/;"	m	struct:imx462
denoise_mode	common.h	/^static const char * const denoise_mode[]={$/;"	v
dev	common.h	/^	struct device *dev;$/;"	m	struct:imx462	typeref:struct:imx462::device
disc	common.h	/^		} disc;$/;"	m	union:_isp_stream_info::__anon3	typeref:struct:_isp_stream_info::__anon3::__anon4
ep	common.h	/^	struct v4l2_fwnode_endpoint ep;$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_fwnode_endpoint
eraseBlock	common.h	/^static u8 eraseBlock[5]		= {0x05, 0x02, 0x0F, 0x06, 0x04};$/;"	v
eraseSector	common.h	/^static u8 eraseSector[5]	= {0x05, 0x02, 0x0F, 0x06, 0x01};$/;"	v
eraseStatus	common.h	/^static u8 eraseStatus[5]	= {0x05, 0x01, 0x0F, 0x06, 0x01};$/;"	v
exposure_mode	common.h	/^	u8 exposure_mode;$/;"	m	struct:imx462
exposure_mode	common.h	/^static const char * const exposure_mode[]={$/;"	v
exposure_value	common.h	/^	u16 exposure_value;$/;"	m	struct:imx462
ext	common.h	/^		}ext;$/;"	m	union:_isp_ctrl_info_std::__anon16	typeref:struct:_isp_ctrl_info_std::__anon16::__anon18
flashStatus	common.h	/^static u8 flashStatus[5]	= {0x05, 0x01, 0x0F, 0x07, 0x01};$/;"	v
flickerDetectCmd	common.h	/^static u8 flickerDetectCmd[5]	= {0x05, 0x02, 0x03, 0x06, 0x05};$/;"	v
fmt	common.h	/^	struct v4l2_mbus_framefmt fmt;$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_mbus_framefmt
fmt_fourcc	common.h	/^	uint32_t fmt_fourcc;$/;"	m	struct:_isp_stream_info
frame_rate	common.h	/^	} frame_rate;$/;"	m	struct:_isp_stream_info	typeref:union:_isp_stream_info::__anon3
frame_rate_denom	common.h	/^			uint16_t frame_rate_denom;$/;"	m	struct:_isp_stream_info::__anon3::__anon4
frame_rate_max_denom	common.h	/^			uint16_t frame_rate_max_denom;$/;"	m	struct:_isp_stream_info::__anon3::__anon5
frame_rate_max_num	common.h	/^			uint16_t frame_rate_max_num;$/;"	m	struct:_isp_stream_info::__anon3::__anon5
frame_rate_min_denom	common.h	/^			uint16_t frame_rate_min_denom;$/;"	m	struct:_isp_stream_info::__anon3::__anon5
frame_rate_min_num	common.h	/^			uint16_t frame_rate_min_num;$/;"	m	struct:_isp_stream_info::__anon3::__anon5
frame_rate_num	common.h	/^			uint16_t frame_rate_num;$/;"	m	struct:_isp_stream_info::__anon3::__anon4
frame_rate_step_denom	common.h	/^			uint16_t frame_rate_step_denom;$/;"	m	struct:_isp_stream_info::__anon3::__anon5
frame_rate_step_num	common.h	/^			uint16_t frame_rate_step_num;$/;"	m	struct:_isp_stream_info::__anon3::__anon5
frame_rate_type	common.h	/^	uint8_t frame_rate_type;$/;"	m	struct:_isp_stream_info
framerate	common.h	/^	u8 framerate;$/;"	m	struct:imx462
framerate_index	common.h	/^	int framerate_index;$/;"	m	struct:imx462
framerates	common.h	/^	const int	*framerates;$/;"	m	struct:camera_common_frmfmt
fwReadcmd	common.h	/^static u8 fwReadcmd[8]		= {0x00, 0x03, 0x18, 0x00, 0x10, 0x00, 0x00, 0x20};$/;"	v
fwSendcmd	common.h	/^static u8 fwSendcmd[4104]	= {0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00};$/;"	v
gain	common.h	/^	u8 gain;$/;"	m	struct:imx462
gamma	common.h	/^	u8 gamma;$/;"	m	struct:imx462
getChkSum	common.h	/^static u8 getChkSum[5]		= {0x05, 0x01, 0x0F, 0x0A, 0x02};$/;"	v
get_isp_logs	ecam-imx462.c	/^static int get_isp_logs(struct i2c_client *client)$/;"	f	file:
getlogAddr	common.h	/^static u8 getlogAddr[5] = {0x05, 0x01, 0x0D, 0x08, 0x04};$/;"	v
getlogLength	common.h	/^static u8 getlogLength[5] = {0x05, 0x01, 0x0D, 0x07, 0x01};$/;"	v
glRdFwStartIntr	common.h	/^static u8 glRdFwStartIntr[5]	= {0x05, 0x01, 0x0F, 0x10, 0x01};$/;"	v
hdr_en	common.h	/^	bool	hdr_en;$/;"	m	struct:camera_common_frmfmt
height	common.h	/^	u32 height;$/;"	m	struct:imx462_mode_info
height	common.h	/^	uint16_t height;$/;"	m	struct:_isp_stream_info
hflip	common.h	/^	u8 hflip;$/;"	m	struct:imx462
i2c_client	common.h	/^	struct i2c_client *i2c_client;$/;"	m	struct:imx462	typeref:struct:imx462::i2c_client
imx462	common.h	/^struct imx462 {$/;"	s
imx462_30fps_60fps	common.h	/^static const int imx462_30fps_60fps[] = {$/;"	v
imx462_auto_exposure	ecam-imx462.c	/^static int imx462_auto_exposure(struct i2c_client *client, u8 value){$/;"	f	file:
imx462_autofocus	ecam-imx462.c	/^static int imx462_autofocus(struct i2c_client *client, u8 value){$/;"	f	file:
imx462_brightness	ecam-imx462.c	/^static int imx462_brightness(struct i2c_client *client, u8 value){$/;"	f	file:
imx462_caf_range	ecam-imx462.c	/^static int imx462_caf_range(struct i2c_client *client, u8 value){$/;"	f	file:
imx462_colour_fmts	common.h	/^static const struct imx462_datafmt imx462_colour_fmts[] = {$/;"	v	typeref:struct:imx462_datafmt
imx462_configure_framerate	ecam-imx462.c	/^static int imx462_configure_framerate(struct i2c_client *client, struct imx462 *imx462)$/;"	f	file:
imx462_contrast	ecam-imx462.c	/^static int imx462_contrast(struct i2c_client *client, u8 value){$/;"	f	file:
imx462_core_ops	ecam-imx462.c	/^static const struct v4l2_subdev_core_ops imx462_core_ops = {$/;"	v	typeref:struct:v4l2_subdev_core_ops	file:
imx462_ctrl	common.h	/^} imx462_ctrl[] = {$/;"	v	typeref:struct:__anon21
imx462_ctrl_ops	common.h	/^static const struct v4l2_ctrl_ops imx462_ctrl_ops;$/;"	v	typeref:struct:v4l2_ctrl_ops
imx462_ctrl_ops	ecam-imx462.c	/^static const struct v4l2_ctrl_ops imx462_ctrl_ops = {$/;"	v	typeref:struct:v4l2_ctrl_ops	file:
imx462_ctrls_init	ecam-imx462.c	/^static int imx462_ctrls_init(struct imx462 *imx462)$/;"	f	file:
imx462_custom_controls	common.h	/^static const struct v4l2_ctrl_config imx462_custom_controls[]={$/;"	v	typeref:struct:v4l2_ctrl_config
imx462_datafmt	common.h	/^struct imx462_datafmt {$/;"	s
imx462_denoise	ecam-imx462.c	/^static int imx462_denoise(struct i2c_client *client, u8 value){$/;"	f	file:
imx462_driver	ecam-imx462.c	/^module_i2c_driver(imx462_driver);$/;"	v
imx462_driver	ecam-imx462.c	/^static struct i2c_driver imx462_driver = {$/;"	v	typeref:struct:i2c_driver	file:
imx462_entity_init_cfg	ecam-imx462.c	/^static int imx462_entity_init_cfg(struct v4l2_subdev *subdev,$/;"	f	file:
imx462_enum_framesizes	ecam-imx462.c	/^static int imx462_enum_framesizes(struct v4l2_subdev *sd,$/;"	f	file:
imx462_enum_mbus_code	ecam-imx462.c	/^static int imx462_enum_mbus_code(struct v4l2_subdev *sd,$/;"	f	file:
imx462_exposure_absolute	ecam-imx462.c	/^static int imx462_exposure_absolute(struct i2c_client *client, u16 value){$/;"	f	file:
imx462_formats	common.h	/^static const struct imx462_pixfmt imx462_formats[] = {$/;"	v	typeref:struct:imx462_pixfmt
imx462_frame_rate	common.h	/^enum imx462_frame_rate {$/;"	g
imx462_framerates	common.h	/^static const int imx462_framerates[] = {$/;"	v
imx462_frmfmt	common.h	/^static const struct camera_common_frmfmt imx462_frmfmt[] = {$/;"	v	typeref:struct:camera_common_frmfmt
imx462_frmsizes	common.h	/^static const struct v4l2_frmsize_discrete imx462_frmsizes[] = {$/;"	v	typeref:struct:v4l2_frmsize_discrete
imx462_g_frame_interval	ecam-imx462.c	/^static int imx462_g_frame_interval(struct v4l2_subdev *sd,$/;"	f	file:
imx462_g_parm	ecam-imx462.c	/^static int imx462_g_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)$/;"	f	file:
imx462_gain	ecam-imx462.c	/^static int imx462_gain(struct i2c_client *client, u8 value){$/;"	f	file:
imx462_get_fmt	ecam-imx462.c	/^static int imx462_get_fmt(struct v4l2_subdev *sd,$/;"	f	file:
imx462_id	ecam-imx462.c	/^static const struct i2c_device_id imx462_id[] = {$/;"	v	typeref:struct:i2c_device_id	file:
imx462_manual_focus_range	ecam-imx462.c	/^static int imx462_manual_focus_range(struct i2c_client *client, u16 value){$/;"	f	file:
imx462_mode_info	common.h	/^struct imx462_mode_info {$/;"	s
imx462_mode_info_data	common.h	/^static const struct imx462_mode_info imx462_mode_info_data[] = {$/;"	v	typeref:struct:imx462_mode_info
imx462_of_match	ecam-imx462.c	/^static const struct of_device_id imx462_of_match[] = {$/;"	v	typeref:struct:of_device_id	file:
imx462_pixfmt	common.h	/^struct imx462_pixfmt {$/;"	s
imx462_powerline_frequency	ecam-imx462.c	/^static int imx462_powerline_frequency(struct i2c_client *client, u16 value){$/;"	f	file:
imx462_probe	ecam-imx462.c	/^static int imx462_probe(struct i2c_client *client)$/;"	f	file:
imx462_read	ecam-imx462.c	/^static int imx462_read(struct i2c_client *client, u8 * val, u32 count)$/;"	f	file:
imx462_reconfigure	ecam-imx462.c	/^static int imx462_reconfigure(struct imx462 *imx462)$/;"	f	file:
imx462_remove	ecam-imx462.c	/^static int imx462_remove(struct i2c_client *client)$/;"	f	file:
imx462_roll	ecam-imx462.c	/^static int imx462_roll(struct i2c_client *client){$/;"	f	file:
imx462_s_ctrl	ecam-imx462.c	/^static int imx462_s_ctrl(struct v4l2_ctrl *ctrl)$/;"	f	file:
imx462_s_frame_interval	ecam-imx462.c	/^static int imx462_s_frame_interval(struct v4l2_subdev *sd,$/;"	f	file:
imx462_s_parm	ecam-imx462.c	/^static int imx462_s_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)$/;"	f	file:
imx462_s_power	ecam-imx462.c	/^static int imx462_s_power(struct v4l2_subdev *sd, int on)$/;"	f	file:
imx462_s_stream	ecam-imx462.c	/^static int imx462_s_stream(struct v4l2_subdev *sd, int enable)$/;"	f	file:
imx462_saturation	ecam-imx462.c	/^static int imx462_saturation(struct i2c_client *client, u8 value){$/;"	f	file:
imx462_set_defaults	ecam-imx462.c	/^static int imx462_set_defaults(struct i2c_client *client)$/;"	f	file:
imx462_set_fmt	ecam-imx462.c	/^static int imx462_set_fmt(struct v4l2_subdev *sd,$/;"	f	file:
imx462_set_power_off	ecam-imx462.c	/^static void imx462_set_power_off(struct imx462 *imx462)$/;"	f	file:
imx462_set_power_on	ecam-imx462.c	/^static int imx462_set_power_on(struct imx462 *imx462)$/;"	f	file:
imx462_set_retain_ctrls	ecam-imx462.c	/^static int imx462_set_retain_ctrls(struct i2c_client *client)$/;"	f	file:
imx462_sharpness	ecam-imx462.c	/^static int imx462_sharpness(struct i2c_client *client, u8 value){$/;"	f	file:
imx462_subdev_ops	ecam-imx462.c	/^static const struct v4l2_subdev_ops imx462_subdev_ops = {$/;"	v	typeref:struct:v4l2_subdev_ops	file:
imx462_subdev_pad_ops	ecam-imx462.c	/^static const struct v4l2_subdev_pad_ops imx462_subdev_pad_ops = {$/;"	v	typeref:struct:v4l2_subdev_pad_ops	file:
imx462_supply_name	common.h	/^static const char * const imx462_supply_name[] = {$/;"	v
imx462_video_ops	ecam-imx462.c	/^static const struct v4l2_subdev_video_ops imx462_video_ops = {$/;"	v	typeref:struct:v4l2_subdev_video_ops	file:
imx462_white_balance	ecam-imx462.c	/^static int imx462_white_balance(struct i2c_client *client, u8 value){$/;"	f	file:
imx462_write	ecam-imx462.c	/^static int imx462_write(struct i2c_client *client, u8 * val, u32 count)$/;"	f	file:
imx462_zoom	ecam-imx462.c	/^static int imx462_zoom(struct i2c_client *client, u8 value){$/;"	f	file:
intROMcmd1	common.h	/^static u8 intROMcmd1[5]		= {0x05, 0x02, 0x0F, 0x57, 0x01};$/;"	v
intROMcmd2	common.h	/^static u8 intROMcmd2[5]		= {0x05, 0x02, 0x0F, 0x57, 0x00};$/;"	v
intStartcmd	common.h	/^static u8 intStartcmd[5]	= {0x05, 0x02, 0x0F, 0x12, 0x01};$/;"	v
irFactor1	common.h	/^static u8 irFactor1[5]		= {0x05, 0x01, 0x0F, 0x10, 0x01};$/;"	v
irFactor2	common.h	/^static u8 irFactor2[5]		= {0x05, 0x01, 0x00, 0x1C, 0x01};$/;"	v
ispLogCount0	common.h	/^static u8 ispLogCount0[5] = {0x05, 0x02, 0x0D, 0x0D};$/;"	v
ispLogCount1	common.h	/^static u8 ispLogCount1[5] = {0x05, 0x02, 0x0D, 0x0C};$/;"	v
ispLogStringAddr	common.h	/^static u8 ispLogStringAddr[5] = {0x05, 0x02, 0x0D, 0x06, 0x00};$/;"	v
isp_fw_update	ecam-imx462.c	/^static int isp_fw_update(struct i2c_client *client)$/;"	f	file:
isp_fw_version_check	ecam-imx462.c	/^static int isp_fw_version_check(struct i2c_client *client)$/;"	f	file:
isp_start_firmware	ecam-imx462.c	/^static int isp_start_firmware(struct i2c_client *client)$/;"	f	file:
link_freq	common.h	/^	struct v4l2_ctrl *link_freq;$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_ctrl
link_freq	common.h	/^	u32 link_freq;$/;"	m	struct:imx462_mode_info
link_freq	common.h	/^static const s64 link_freq[] = {$/;"	v
lock	common.h	/^	u8 lock;$/;"	m	struct:imx462
logMode	common.h	/^static u8 logMode[5]   = {0x05, 0x02, 0x0D, 0x0F, 0x02};$/;"	v
logStartStop	common.h	/^static u8 logStartStop[5] = {0x05, 0x02, 0x0D, 0x0E};$/;"	v
manual_focus	common.h	/^	u16 manual_focus;$/;"	m	struct:imx462
max_fps	common.h	/^	u32 max_fps;$/;"	m	struct:imx462_mode_info
mcu_i2c_mutex	common.h	/^	struct mutex mcu_i2c_mutex;$/;"	m	struct:imx462	typeref:struct:imx462::mutex
mcu_i2c_mutex	common.h	/^DEFINE_MUTEX(mcu_i2c_mutex);$/;"	v
menu	common.h	/^		char **menu;$/;"	m	struct:_isp_ctrl_ui_info::__anon2
menu	common.h	/^		char menu[MAX_CTRL_MENU_ELEM][MAX_CTRL_UI_STRING_LEN];$/;"	m	struct:_isp_ctrl_info_std::__anon20
mode	common.h	/^	int	mode;$/;"	m	struct:camera_common_frmfmt
num_framerates	common.h	/^	int	num_framerates;$/;"	m	struct:camera_common_frmfmt
num_menu_elem	common.h	/^		uint8_t num_menu_elem;$/;"	m	struct:_isp_ctrl_info_std::__anon20
num_menu_elem	common.h	/^		uint8_t num_menu_elem;$/;"	m	struct:_isp_ctrl_ui_info::__anon2
numctrls	common.h	/^	int numctrls;$/;"	m	struct:imx462
obj-m	Makefile	/^obj-m := ecam-imx462.o $/;"	m
pad	common.h	/^	struct media_pad pad;$/;"	m	struct:imx462	typeref:struct:imx462::media_pad
pix	common.h	/^	struct v4l2_pix_format pix;$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_pix_format
pixel_clock	common.h	/^	struct v4l2_ctrl *pixel_clock;$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_ctrl
pixel_clock	common.h	/^	u32 pixel_clock;$/;"	m	struct:imx462_mode_info
power_count	common.h	/^	int power_count;$/;"	m	struct:imx462
programROM	common.h	/^static u8 programROM[5]		= {0x05, 0x02, 0x0F, 0x07, 0x01};$/;"	v
pwn_gpio	common.h	/^	struct gpio_desc *pwn_gpio;$/;"	m	struct:imx462	typeref:struct:imx462::gpio_desc
rawPreviewOFF	common.h	/^static u8 rawPreviewOFF[5]	= {0x05, 0x02, 0x02, 0x12, 0x00};$/;"	v
reg	common.h	/^	u16 reg;$/;"	m	struct:reg_value
reg_value	common.h	/^struct reg_value {$/;"	s
romErase	ecam-imx462.c	/^static int romErase(struct i2c_client *client, uint32_t startAddress, bool sectorErase)$/;"	f	file:
romFlash	ecam-imx462.c	/^static int romFlash(struct i2c_client *client)$/;"	f	file:
rst_gpio	common.h	/^	struct gpio_desc *rst_gpio;$/;"	m	struct:imx462	typeref:struct:imx462::gpio_desc
saturation	common.h	/^	u8 saturation;$/;"	m	struct:imx462
sd	common.h	/^	struct v4l2_subdev sd;$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_subdev
setCamMode	common.h	/^static u8 setCamMode[5]		= {0x05, 0x02, 0x00, 0x0B, 0x02};$/;"	v
setCamOff	common.h	/^static u8 setCamOff[5]		= {0x05, 0x02, 0x00, 0x0B, 0x01};$/;"	v
setFWsize	common.h	/^static u8 setFWsize[6]		= {0x06, 0x02, 0x0F, 0x04, 0x10, 0x00};$/;"	v
setPLL	common.h	/^static u8 setPLL[10]		= {0x0A, 0x02, 0x0F, 0x1C, 0x00, 0x1B, 0x01, 0x7C, 0x11, 0xA5};$/;"	v
setROMaddr	common.h	/^static u8 setROMaddr[8]		= {0x08, 0x02, 0x0F, 0x00};$/;"	v
sharpness	common.h	/^	u8 sharpness;$/;"	m	struct:imx462
size	common.h	/^	struct v4l2_frmsize_discrete	size;$/;"	m	struct:camera_common_frmfmt	typeref:struct:camera_common_frmfmt::v4l2_frmsize_discrete
slctFmt	common.h	/^static u8 slctFmt[5]		= {0x05, 0x02, 0x01, 0x07, 0x03};$/;"	v
slctFrate60	common.h	/^static u8 slctFrate60[5]	= {0x05, 0x02, 0x01, 0x02, 0x08};$/;"	v
slctReslnFHD_30fps	common.h	/^static u8 slctReslnFHD_30fps[5]	= {0x05, 0x02, 0x01, 0x01, 0x67};$/;"	v
slctReslnFHD_60fps	common.h	/^static u8 slctReslnFHD_60fps[5]	= {0x05, 0x02, 0x01, 0x01, 0x28};$/;"	v
slctReslnHD_30fps	common.h	/^static u8 slctReslnHD_30fps[5] 	= {0x05, 0x02, 0x01, 0x01, 0x25};$/;"	v
slctReslnHD_60fps	common.h	/^static u8 slctReslnHD_60fps[5] 	= {0x05, 0x02, 0x01, 0x01, 0x21};$/;"	v
slctReslnVGA_30fps	common.h	/^static u8 slctReslnVGA_30fps[5] = {0x05, 0x02, 0x01, 0x01, 0x68};$/;"	v
slctReslnVGA_60fps	common.h	/^static u8 slctReslnVGA_60fps[5] = {0x05, 0x02, 0x01, 0x01, 0x17};$/;"	v
slctSensr	common.h	/^static u8 slctSensr[5]		= {0x05, 0x02, 0x00, 0x17, 0x00};$/;"	v
startRAM	common.h	/^static u8 startRAM[5]		= {0x05, 0x02, 0x0F, 0x4A, 0x01};$/;"	v
std	common.h	/^		}std;$/;"	m	union:_isp_ctrl_info_std::__anon16	typeref:struct:_isp_ctrl_info_std::__anon16::__anon17
streamcap	common.h	/^	struct v4l2_captureparm streamcap;$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_captureparm
streaming	common.h	/^	u8 streaming;$/;"	m	struct:imx462
subdev	common.h	/^	struct v4l2_subdev subdev;$/;"	m	struct:imx462	typeref:struct:imx462::v4l2_subdev
supplies	common.h	/^	struct regulator_bulk_data supplies[IMX462_NUM_SUPPLIES];$/;"	m	struct:imx462	typeref:struct:imx462::regulator_bulk_data
test_pattern	common.h	/^	u8 test_pattern;$/;"	m	struct:imx462
to_imx462	common.h	/^static struct imx462 *to_imx462(const struct i2c_client *client)$/;"	f
toggle_gpio	ecam-imx462.c	/^static void toggle_gpio(struct gpio_desc *gpio, int delay)$/;"	f	file:
val	common.h	/^	u8 val;$/;"	m	struct:reg_value
val_data	common.h	/^			uint8_t val_data[MAX_CTRL_DATA_LEN];$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon18
val_length	common.h	/^			uint32_t val_length;$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon18
val_type	common.h	/^			uint8_t val_type;$/;"	m	struct:_isp_ctrl_info_std::__anon16::__anon18
vflip	common.h	/^	u8 vflip;$/;"	m	struct:imx462
wb_mode	common.h	/^	u8 wb_mode;$/;"	m	struct:imx462
wdr_level	common.h	/^	u8 wdr_level;$/;"	m	struct:imx462
white_balance_menu	common.h	/^static const char * const white_balance_menu[]={$/;"	v
width	common.h	/^	u32 width;$/;"	m	struct:imx462_mode_info
width	common.h	/^	uint16_t width;$/;"	m	struct:_isp_stream_info
xclk	common.h	/^	struct clk *xclk;$/;"	m	struct:imx462	typeref:struct:imx462::clk
zoom	common.h	/^	u8 zoom;$/;"	m	struct:imx462
